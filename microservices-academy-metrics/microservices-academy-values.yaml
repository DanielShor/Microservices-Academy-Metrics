prom-mdm-converter:
  # Default values for prom-mdm-converter.
  # This is a YAML-formatted file.
  # Declare variables to be passed into your templates.

  replicaCount: 2
  aadpodidbinding: course-identity

  # init containers
  genevaSecrets:
    mode: kvagent 
    manual: # Must prepopulate secret manually
      secretName: geneva-secret # Name of kubernetes secrets containing gcs.{crt,key}

  # See https://github.com/Hexadite/acs-keyvault-agent
  kvagent:
    image:
      # Put your acr in the following line
      #################
      repository: infrastructurecourse.azurecr.io/acskeyvaultagent
      #################
      tag: master_19
      pullPolicy: Always
    certsPath: /secrets/
    authorityServer: https://login.microsoftonline.com/
    vaultResourceName: https://vault.azure.net
    use_msi: true
    # Geneva MDM doesn't support intermediate CA certs in anything except for OnCert generated certs
    # don't download CA certs by default.
    download_cacerts: true

    # Put your cert name in the following line
    #################
    cert: pfx-wcd-mds-gcs-stg::mdm-cert.pem:mdm-key.pem
    #################
    # Put your Key Vault URL in the following line
    #################
    vault_base_url: https://wdatp-infra-key-vault.vault.azure.net/
    #################
    
    resources: {}

  image:
    # Put your acr in the following line
    #################
    repository: infrastructurecourse.azurecr.io/prom-mdm-converter
    #################
    tag: 2.0.master.20200115.1
    pullPolicy: Always
    pullSecret:
      create: False
      name: ""
      #registry: 
      #username:
      #password:

  nameOverride: ""
  fullnameOverride: ""

  mdm:
  # if userSecretFile is true, will create a secret object with local certificates (see readme)
  # If it is false, will use the keyvault agent to pull certificates directly from keyvault
    useSecretFile: false
    logLevel: Info
    endpoint: https://global.metrics.nsatc.net/
    # Put your account name in the following line
    #################
    account: WCDDev
    #################
    certFile: /secrets/certs_keys/mdm-cert.pem
    keyFile: /secrets/certs_keys/mdm-key.pem
    source:
      environment: DefaultEnvironment
      role: DefaultRole
      roleinstance: DefaultRoleInstance
      #identity:

  converter:
    region: region
    underlay: underlay
    statsdEndpoint: localhost
    statsdPort: 8125
    statsdProtocol: tcp
    debugLogs: false
    # You can put a default Geneva namespace for the metrics
    # if not specified, the value 'prometheus' is used
    defaultMdmNamespace: microservices-academy

  service:
    type: ClusterIP
    port: 80

  internalPort: 8080

  resources: {}
    # limits:
    #  cpu: 100m
    #  memory: 128Mi
    # requests:
    #  cpu: 100m
    #  memory: 128Mi

  nodeSelector: {}

  tolerations: []

  affinity: {}

# You can take a look at the following example as a reference on how to fill the rules section:
# https://msazure.visualstudio.com/KubernetesSharedTools/_git/prom-mdm-converter?path=%2Frules%2Fexample_geneva.yaml&_a=contents&version=GBmaster
  rules: |
    defaultMetricAllow: false
    defaultDimensionAllow: true
    startsWithFilters: 
    - wdatp
    metrics:
      pod:cpu_usage_percent_by_limit_scaled:
      pod:memory_usage_percent_by_limit_scaled:
      ALERTS:


prometheus-operator:
  kubelet:
    serviceMonitor:
      https: false

  kubeProxy:
    enabled: false

  prometheus:
    prometheusSpec:
      remoteWrite:
      - url: "http://microservices-academy-metrics-prom-mdm-converter/receive"

  additionalPrometheusRules:
  - name: microservices-academy-metrics-rules
    groups:
  ## The following rules are cpu/memory percent by requests/limits, scaled by 1000.
  ## Example: 0.619 (represents 61.9% usage) will be shown as 619
    - name: microservices-academy-metrics.kubelets.rules.extension
      rules:
      - record: pod:cpu_usage_percent_by_request_scaled
        expr: sum by (pod_name, namespace) (rate(container_cpu_usage_seconds_total{image!="",container_name!="POD"}[1m])) / sum by (pod_name, namespace) (label_join(kube_pod_container_resource_requests_cpu_cores,  "pod_name", "", "pod" )) * 1000
      - record: pod:cpu_usage_percent_by_limit_scaled
        expr: sum by (pod_name, namespace) (rate(container_cpu_usage_seconds_total{image!="",container_name!="POD"}[1m])) / sum by (pod_name, namespace) (label_join(kube_pod_container_resource_limits_cpu_cores,  "pod_name", "", "pod" )) * 1000
      - alert: MicroservicesAcademyKubePodCPUHigh
        annotations:
          message: Pod {{`{{ $labels.namespace }}`}}/{{`{{ $labels.pod_name }}`}} is consuming more than 90% of it's CPU limit, for more than 15 minutes.
        expr: pod:cpu_usage_percent_by_limit_scaled / 10 > 90
        for: 15m
        labels:
          severity: warning
      - alert: MicroservicesAcademyKubePodCPUHigh
        annotations:
          message: Pod {{`{{ $labels.namespace }}`}}/{{`{{ $labels.pod_name }}`}} is consuming more than 90% of it's CPU limit, for more than 45 minutes.
        expr: pod:cpu_usage_percent_by_limit_scaled / 10 > 90
        for: 45m
        labels:
          severity: critical
      - record: pod:memory_usage_percent_by_request_scaled
        expr: sum by (pod_name, namespace) (container_memory_working_set_bytes{image!="", container_name!="POD"}) / sum by (pod_name, namespace) (label_join(kube_pod_container_resource_requests_memory_bytes,  "pod_name", "", "pod" )) * 1000
      - record: pod:memory_usage_percent_by_limit_scaled
        expr: sum by (pod_name, namespace) (container_memory_working_set_bytes{image!="", container_name!="POD"}) / sum by (pod_name, namespace) (label_join(kube_pod_container_resource_limits_memory_bytes,  "pod_name", "", "pod" )) * 1000
      - alert: MicroservicesAcademyKubePodMemoryHigh
        annotations:
          message: Pod {{`{{ $labels.namespace }}`}}/{{`{{ $labels.pod_name }}`}} is consuming more than 90% of it's memory limit, for more than 45 minutes.
        expr: pod:memory_usage_percent_by_limit_scaled / 10 > 90
        for: 15m
        labels:
          severity: warning
      - alert: MicroservicesAcademyKubePodMemoryHigh
        annotations:
          message: Pod {{`{{ $labels.namespace }}`}}/{{`{{ $labels.pod_name }}`}} is consuming more than 90% of it's memory limit, for more than 45 minutes.
        expr: pod:memory_usage_percent_by_limit_scaled / 10 > 90
        for: 45m
        labels:
          severity: critical
